import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.profile.ProfileCredentialsProvider

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

group = rxpaparazzo_group
version = rxpaparazzo_version

android {
    compileSdkVersion sdk_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion sdk_version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "io.reactivex.rxjava2:rxjava:2.2.21"
    implementation "com.github.VictorAlbertos:RxActivityResult:0.5.0-2.x"
    implementation 'com.github.tbruyelle:rxpermissions:0.11'
    api 'com.github.yalantis:ucrop:2.2.8'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation "androidx.documentfile:documentfile:1.0.1"

    testImplementation 'junit:junit:4.12'
}

configurations.all {
    resolutionStrategy.force "com.android.support:exifinterface:28.0.0"
    resolutionStrategy.force "com.android.support:animated-vector-drawable:28.0.0"
    resolutionStrategy.force "com.android.support:appcompat-v7:28.0.0"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def fetchAwsCredentials = {
    try {
        return new ProfileCredentialsProvider().credentials
    } catch (Exception e) {
        logger.debug('Unable to retrieve AWS credentials from profile, publishing to S3 will not be available.', e)
        return null
    }
}
AWSCredentials awsCredentials = fetchAwsCredentials()

publishing {
    repositories {
        maven {
            url "s3://maven.letsgocity.be/release"
            credentials(AwsCredentials) {
                accessKey = awsCredentials.AWSAccessKeyId
                secretKey = awsCredentials.AWSSecretKey
            }
        }
    }
    publications {
        rxPaparazzo(MavenPublication) {
            groupId group
            artifactId 'RxPaparazzo'
            version version
            artifact("$buildDir/outputs/aar/rx_paparazzo-release.aar")
            pom.withXml {
                def dependencies  = asNode().appendNode("dependencies")
                configurations.implementation.allDependencies.each {  dep ->
                    def depNode  = dependencies.appendNode("dependency")
                    depNode.appendNode("groupId", dep.group)
                    depNode.appendNode("artifactId", dep.name)
                    depNode.appendNode("version", dep.version)
                }
            }
        }
    }
}